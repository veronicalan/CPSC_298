import { useState, useCallback } from 'react'
import { Search, X, ChevronRight, Apple, Carrot, Utensils, BookOpen } from 'lucide-react'

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"

// Mock data for ingredients and recipes
const allIngredients = [
  "Chicken", "Beef", "Pork", "Rice", "Pasta", "Tomato", "Onion", "Garlic",
  "Cheese", "Egg", "Milk", "Butter", "Olive Oil", "Salt", "Pepper", "Flour",
  "Sugar", "Lemon", "Carrot", "Potato", "Spinach", "Broccoli", "Bell Pepper"
]

const recipes = [
  {
    id: 1,
    name: "Spaghetti Carbonara",
    ingredients: ["Pasta", "Egg", "Cheese", "Pork"],
    instructions: "1. Cook pasta. 2. Fry pork. 3. Mix eggs and cheese. 4. Combine all ingredients."
  },
  {
    id: 2,
    name: "Chicken Stir Fry",
    ingredients: ["Chicken", "Rice", "Bell Pepper", "Onion", "Garlic"],
    instructions: "1. Cook rice. 2. Stir fry chicken and vegetables. 3. Combine and season."
  },
  {
    id: 3,
    name: "Vegetable Omelette",
    ingredients: ["Egg", "Cheese", "Spinach", "Tomato", "Onion"],
    instructions: "1. Beat eggs. 2. Saut√© vegetables. 3. Pour eggs over vegetables. 4. Add cheese and fold."
  }
]

export default function Component() {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedIngredients, setSelectedIngredients] = useState<string[]>([])
  const [matchingRecipes, setMatchingRecipes] = useState<typeof recipes>([])

  const filteredIngredients = allIngredients.filter(ingredient => 
    ingredient.toLowerCase().includes(searchTerm.toLowerCase()) &&
    !selectedIngredients.includes(ingredient)
  )

  const addIngredient = useCallback((ingredient: string) => {
    setSelectedIngredients(prev => {
      const updated = [...prev, ingredient]
      updateMatchingRecipes(updated)
      return updated
    })
    setSearchTerm("")
  }, [])

  const removeIngredient = useCallback((ingredient: string) => {
    setSelectedIngredients(prev => {
      const updated = prev.filter(i => i !== ingredient)
      updateMatchingRecipes(updated)
      return updated
    })
  }, [])

  const updateMatchingRecipes = useCallback((ingredients: string[]) => {
    const matching = recipes.filter(recipe => 
      ingredients.every(ingredient => recipe.ingredients.includes(ingredient))
    )
    setMatchingRecipes(matching)
  }, [])

  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value)
  }, [])

  return (
    <div className="min-h-screen bg-yellow-50 py-8">
      <style jsx global>{`
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        body {
          font-family: 'Poppins', sans-serif;
        }
      `}</style>
      <div className="container mx-auto p-4 max-w-2xl bg-white rounded-lg shadow-lg">
        <h1 className="text-3xl font-bold mb-6 text-center text-orange-600 flex items-center justify-center">
          <Carrot className="mr-2 h-8 w-8" />
          Recipe Finder
          <Apple className="ml-2 h-8 w-8" />
        </h1>
        
        <div className="mb-6 bg-gray-100 p-4 rounded-lg">
          <div className="flex space-x-2 mb-2">
            <Input
              type="text"
              placeholder="Search ingredients..."
              value={searchTerm}
              onChange={handleSearchChange}
              className="flex-grow"
            />
            <Button onClick={() => setSearchTerm("")} variant="outline">Clear</Button>
          </div>
          
          {searchTerm && (
            <ScrollArea className="h-32 border rounded-md p-2 bg-white">
              {filteredIngredients.map(ingredient => (
                <Button
                  key={ingredient}
                  variant="ghost"
                  className="w-full justify-start"
                  onClick={() => addIngredient(ingredient)}
                >
                  {ingredient}
                </Button>
              ))}
            </ScrollArea>
          )}
        </div>
        
        <div className="mb-6">
          <h2 className="text-xl font-semibold mb-3 flex items-center text-orange-500">
            <Utensils className="mr-2 h-6 w-6" />
            Selected Ingredients:
          </h2>
          <div className="flex flex-wrap gap-2 bg-gray-100 p-3 rounded-lg min-h-[50px]">
            {selectedIngredients.map(ingredient => (
              <Button
                key={ingredient}
                variant="secondary"
                className="flex items-center space-x-1"
                onClick={() => removeIngredient(ingredient)}
              >
                <span>{ingredient}</span>
                <X className="h-4 w-4" />
              </Button>
            ))}
          </div>
        </div>
        
        <div>
          <h2 className="text-xl font-semibold mb-3 flex items-center text-orange-500">
            <BookOpen className="mr-2 h-6 w-6" />
            Matching Recipes:
          </h2>
          {matchingRecipes.length === 0 ? (
            <p className="text-center text-gray-500 italic">No matching recipes found. Try adding more ingredients!</p>
          ) : (
            <ul className="space-y-2 bg-gray-100 p-3 rounded-lg">
              {matchingRecipes.map(recipe => (
                <li key={recipe.id} className="bg-white rounded-md p-2 shadow">
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button variant="link" className="w-full justify-between text-left">
                        <span>{recipe.name}</span>
                        <ChevronRight className="h-4 w-4 flex-shrink-0" />
                      </Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle className="text-2xl text-orange-600">{recipe.name}</DialogTitle>
                        <DialogDescription>
                          <h3 className="font-semibold mt-4 mb-2 text-lg">Ingredients:</h3>
                          <ul className="list-disc list-inside mb-4">
                            {recipe.ingredients.map(ingredient => (
                              <li key={ingredient}>{ingredient}</li>
                            ))}
                          </ul>
                          <h3 className="font-semibold mb-2 text-lg">Instructions:</h3>
                          <p className="text-gray-700">{recipe.instructions}</p>
                        </DialogDescription>
                      </DialogHeader>
                    </DialogContent>
                  </Dialog>
                </li>
              ))}
            </ul>
          )}
        </div>
      </div>
    </div>
  )
}
